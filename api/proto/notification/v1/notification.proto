syntax = "proto3";

package notification.v1;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/serendipityConfusion/notification-platform/api/gen/v1;notificationpb";

// 渠道类型枚举
enum Channel {
  // 未指定渠道
  CHANNEL_UNSPECIFIED = 0;
  // 短信
  SMS = 1;
  // 邮件
  EMAIL = 2;
  // 站内信
  IN_APP = 3;
}

// 通知发送状态枚举
enum SendStatus {
  // 未指定通知发送状态
  SEND_STATUS_UNSPECIFIED = 0;
  // 事务消息，准备阶段
  PREPARE = 1;
  // 事务消息，取消发送
  CANCELED = 2;
  // 等待发送，普通消息的默认状态，事务消息的确认发送状态（二者重合故用一个状态表示）
  PENDING = 3;
  // 发送成功
  SUCCEEDED = 4;
  // 发送失败
  FAILED = 5;
}

// 错误代码枚举
enum ErrorCode {
  // 未指定错误码
  ERROR_CODE_UNSPECIFIED = 0;
  // 无效参数
  INVALID_PARAMETER = 1;
  // 频率限制
  RATE_LIMITED = 2;
  // 模板未找到
  TEMPLATE_NOT_FOUND = 3;
  // 渠道被禁用
  CHANNEL_DISABLED = 4;
  // 创建通知失败
  CREATE_NOTIFICATION_FAILED = 5;
  // 业务ID未找到
  BIZ_ID_NOT_FOUND = 6;
  // 通知未找到
  NOTIFICATION_NOT_FOUND = 7;
  // 无可用供应商
  NO_AVAILABLE_PROVIDER = 8;
  // 无可用渠道
  NO_AVAILABLE_CHANNEL = 9;
  // 发送通知失败
  SEND_NOTIFICATION_FAILED = 10;
  // 业务配置不存在
  CONFIG_NOT_FOUND = 11;
  // 没有提供配额相关配置
  NO_QUOTA_CONFIG = 12;
  // 额度已用完
  NO_QUOTA = 13;
  // 额度记录不存在
  QUOTA_NOT_FOUND = 14;
  // 供应商记录不存在
  PROVIDER_NOT_FOUND = 15;
  // 未知渠道类型
  UNKNOWN_CHANNEL = 16;
}

// 通知发送策略定义
message SendStrategy {
  oneof strategy_type {
    // 立即发送
    ImmediateStrategy immediate = 1;
    // 延迟发送
    DelayedStrategy delayed = 2;
    // 定时发送
    ScheduledStrategy scheduled = 3;
    // 时间窗口内发送
    TimeWindowStrategy time_window = 4;
    // 截止日期前发送
    DeadlineStrategy deadline = 5;
  }

  // 空结构表示立即发送
  message ImmediateStrategy {}

  message DelayedStrategy {
    // 延迟秒数
    int64 delay_seconds = 1;
  }

  message ScheduledStrategy {
    // 具体发送时间
    google.protobuf.Timestamp send_time = 1;
  }

  message TimeWindowStrategy {
    // 开始时间
    int64 start_time_milliseconds = 1;
    // 结束时间
    int64 end_time_milliseconds = 2;
  }

  message DeadlineStrategy {
    // 截止日期
    google.protobuf.Timestamp deadline = 1;
  }
}

service NotificationService {
  // 同步单条发送
  rpc SendNotification(SendNotificationRequest) returns (SendNotificationResponse);

  // 异步单条发送
  rpc SendNotificationAsync(SendNotificationAsyncRequest) returns (SendNotificationAsyncResponse);

  // 同步批量发送
  rpc BatchSendNotifications(BatchSendNotificationsRequest) returns (BatchSendNotificationsResponse);

  // 异步批量发送
  rpc BatchSendNotificationsAsync(BatchSendNotificationsAsyncRequest) returns (BatchSendNotificationsAsyncResponse);

  // 准备事务
  rpc TxPrepare(TxPrepareRequest) returns (TxPrepareResponse);
  // 提交事务
  rpc TxCommit(TxCommitRequest) returns (TxCommitResponse);
  // 取消事务
  rpc TxCancel(TxCancelRequest) returns (TxCancelResponse);
}

// 通知
message Notification {
  // 业务方某个业务内部的唯一标识
  string key = 1;
  // 接收者标识(可以是用户ID、邮箱、手机号等)
  repeated string receivers = 2;
  // 发送渠道
  Channel channel = 3;
  // 模板ID
  string template_id = 4;
  // v0.0.1 v0.0.2
  // template_version = 5;
  // 模板参数
  map<string, string> template_params = 5;
  // 发送策略
  SendStrategy strategy = 6;
  // 只能往后加
  // string field1 = 7;
  // string field2 = 8;
  // 重要，并且几乎大家都要传
  // string importantField = 2;
  string receiver = 7;
}

// 同步单条发送通知请求
message SendNotificationRequest {
  Notification notification = 1;
}

// 同步单条发送通知响应
message SendNotificationResponse {
  // 通知平台生成的通知ID
  uint64 notification_id = 1;
  // 发送状态
  SendStatus status = 2;
  // 失败时的错误代码
  ErrorCode error_code = 3;
  // 错误详情
  string error_message = 4;
}

// 异步单条发送通知请求
message SendNotificationAsyncRequest {
  Notification notification = 1;
}

// 异步单条发送通知响应
message SendNotificationAsyncResponse {
  // 通知平台生成的通知ID
  uint64 notification_id = 1;
  // 失败时的错误代码
  ErrorCode error_code = 4;
  // 错误详情
  string error_message = 5;
}

// 同步批量发送通知请求
message BatchSendNotificationsRequest {
  repeated Notification notifications = 1;
}

// 同步批量发送通知响应
message BatchSendNotificationsResponse {
  // 所有结果
  repeated SendNotificationResponse results = 1;
  // 总数
  int32 total_count = 2;
  // 成功数
  int32 success_count = 3;
}

// 异步批量发送通知请求
message BatchSendNotificationsAsyncRequest {
  repeated Notification notifications = 1;
}

// 异步批量发送通知响应
message BatchSendNotificationsAsyncResponse {
  // 通知平台生成的通知ID
  repeated uint64 notification_ids = 1;
}

// 准备事务请求
message TxPrepareRequest {
  notification.v1.Notification notification = 1;
}

// 准备事务响应
message TxPrepareResponse {}

// 提交事务请求
message TxCommitRequest {
  string key = 1; // 事务唯一标识
}

// 提交事务响应
message TxCommitResponse {}

// 回滚事务请求
message TxCancelRequest {
  string key = 1; // 事务唯一标识
}

// 回滚事务响应
message TxCancelResponse {}
