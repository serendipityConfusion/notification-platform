// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: config/v1/config.proto

package configv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BusinessConfigService_GetByIDs_FullMethodName   = "/config.v1.BusinessConfigService/GetByIDs"
	BusinessConfigService_GetByID_FullMethodName    = "/config.v1.BusinessConfigService/GetByID"
	BusinessConfigService_Delete_FullMethodName     = "/config.v1.BusinessConfigService/Delete"
	BusinessConfigService_SaveConfig_FullMethodName = "/config.v1.BusinessConfigService/SaveConfig"
)

// BusinessConfigServiceClient is the client API for BusinessConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// BusinessConfigService provides methods to manage business configurations
type BusinessConfigServiceClient interface {
	// GetByIDs retrieves multiple business configurations by their IDs
	GetByIDs(ctx context.Context, in *GetByIDsRequest, opts ...grpc.CallOption) (*GetByIDsResponse, error)
	// GetByID retrieves a single business configuration by its ID
	GetByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*GetByIDResponse, error)
	// Delete removes a business configuration by its ID
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	// SaveConfig saves non-zero fields of a business configuration
	SaveConfig(ctx context.Context, in *SaveConfigRequest, opts ...grpc.CallOption) (*SaveConfigResponse, error)
}

type businessConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBusinessConfigServiceClient(cc grpc.ClientConnInterface) BusinessConfigServiceClient {
	return &businessConfigServiceClient{cc}
}

func (c *businessConfigServiceClient) GetByIDs(ctx context.Context, in *GetByIDsRequest, opts ...grpc.CallOption) (*GetByIDsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetByIDsResponse)
	err := c.cc.Invoke(ctx, BusinessConfigService_GetByIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessConfigServiceClient) GetByID(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*GetByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetByIDResponse)
	err := c.cc.Invoke(ctx, BusinessConfigService_GetByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessConfigServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, BusinessConfigService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessConfigServiceClient) SaveConfig(ctx context.Context, in *SaveConfigRequest, opts ...grpc.CallOption) (*SaveConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveConfigResponse)
	err := c.cc.Invoke(ctx, BusinessConfigService_SaveConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BusinessConfigServiceServer is the server API for BusinessConfigService service.
// All implementations must embed UnimplementedBusinessConfigServiceServer
// for forward compatibility.
//
// BusinessConfigService provides methods to manage business configurations
type BusinessConfigServiceServer interface {
	// GetByIDs retrieves multiple business configurations by their IDs
	GetByIDs(context.Context, *GetByIDsRequest) (*GetByIDsResponse, error)
	// GetByID retrieves a single business configuration by its ID
	GetByID(context.Context, *GetByIDRequest) (*GetByIDResponse, error)
	// Delete removes a business configuration by its ID
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	// SaveConfig saves non-zero fields of a business configuration
	SaveConfig(context.Context, *SaveConfigRequest) (*SaveConfigResponse, error)
	mustEmbedUnimplementedBusinessConfigServiceServer()
}

// UnimplementedBusinessConfigServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBusinessConfigServiceServer struct{}

func (UnimplementedBusinessConfigServiceServer) GetByIDs(context.Context, *GetByIDsRequest) (*GetByIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByIDs not implemented")
}
func (UnimplementedBusinessConfigServiceServer) GetByID(context.Context, *GetByIDRequest) (*GetByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedBusinessConfigServiceServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedBusinessConfigServiceServer) SaveConfig(context.Context, *SaveConfigRequest) (*SaveConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveConfig not implemented")
}
func (UnimplementedBusinessConfigServiceServer) mustEmbedUnimplementedBusinessConfigServiceServer() {}
func (UnimplementedBusinessConfigServiceServer) testEmbeddedByValue()                               {}

// UnsafeBusinessConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BusinessConfigServiceServer will
// result in compilation errors.
type UnsafeBusinessConfigServiceServer interface {
	mustEmbedUnimplementedBusinessConfigServiceServer()
}

func RegisterBusinessConfigServiceServer(s grpc.ServiceRegistrar, srv BusinessConfigServiceServer) {
	// If the following call pancis, it indicates UnimplementedBusinessConfigServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BusinessConfigService_ServiceDesc, srv)
}

func _BusinessConfigService_GetByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessConfigServiceServer).GetByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessConfigService_GetByIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessConfigServiceServer).GetByIDs(ctx, req.(*GetByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessConfigService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessConfigServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessConfigService_GetByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessConfigServiceServer).GetByID(ctx, req.(*GetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessConfigService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessConfigServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessConfigService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessConfigServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessConfigService_SaveConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessConfigServiceServer).SaveConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessConfigService_SaveConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessConfigServiceServer).SaveConfig(ctx, req.(*SaveConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BusinessConfigService_ServiceDesc is the grpc.ServiceDesc for BusinessConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BusinessConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "config.v1.BusinessConfigService",
	HandlerType: (*BusinessConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetByIDs",
			Handler:    _BusinessConfigService_GetByIDs_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _BusinessConfigService_GetByID_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _BusinessConfigService_Delete_Handler,
		},
		{
			MethodName: "SaveConfig",
			Handler:    _BusinessConfigService_SaveConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config/v1/config.proto",
}
