// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: notification/v1/notification.proto

package notificationpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NotificationService_SendNotification_FullMethodName            = "/notification.v1.NotificationService/SendNotification"
	NotificationService_SendNotificationAsync_FullMethodName       = "/notification.v1.NotificationService/SendNotificationAsync"
	NotificationService_BatchSendNotifications_FullMethodName      = "/notification.v1.NotificationService/BatchSendNotifications"
	NotificationService_BatchSendNotificationsAsync_FullMethodName = "/notification.v1.NotificationService/BatchSendNotificationsAsync"
	NotificationService_TxPrepare_FullMethodName                   = "/notification.v1.NotificationService/TxPrepare"
	NotificationService_TxCommit_FullMethodName                    = "/notification.v1.NotificationService/TxCommit"
	NotificationService_TxCancel_FullMethodName                    = "/notification.v1.NotificationService/TxCancel"
)

// NotificationServiceClient is the client API for NotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationServiceClient interface {
	// 同步单条发送
	SendNotification(ctx context.Context, in *SendNotificationRequest, opts ...grpc.CallOption) (*SendNotificationResponse, error)
	// 异步单条发送
	SendNotificationAsync(ctx context.Context, in *SendNotificationAsyncRequest, opts ...grpc.CallOption) (*SendNotificationAsyncResponse, error)
	// 同步批量发送
	BatchSendNotifications(ctx context.Context, in *BatchSendNotificationsRequest, opts ...grpc.CallOption) (*BatchSendNotificationsResponse, error)
	// 异步批量发送
	BatchSendNotificationsAsync(ctx context.Context, in *BatchSendNotificationsAsyncRequest, opts ...grpc.CallOption) (*BatchSendNotificationsAsyncResponse, error)
	// 准备事务
	TxPrepare(ctx context.Context, in *TxPrepareRequest, opts ...grpc.CallOption) (*TxPrepareResponse, error)
	// 提交事务
	TxCommit(ctx context.Context, in *TxCommitRequest, opts ...grpc.CallOption) (*TxCommitResponse, error)
	// 取消事务
	TxCancel(ctx context.Context, in *TxCancelRequest, opts ...grpc.CallOption) (*TxCancelResponse, error)
}

type notificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationServiceClient(cc grpc.ClientConnInterface) NotificationServiceClient {
	return &notificationServiceClient{cc}
}

func (c *notificationServiceClient) SendNotification(ctx context.Context, in *SendNotificationRequest, opts ...grpc.CallOption) (*SendNotificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendNotificationResponse)
	err := c.cc.Invoke(ctx, NotificationService_SendNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) SendNotificationAsync(ctx context.Context, in *SendNotificationAsyncRequest, opts ...grpc.CallOption) (*SendNotificationAsyncResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendNotificationAsyncResponse)
	err := c.cc.Invoke(ctx, NotificationService_SendNotificationAsync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) BatchSendNotifications(ctx context.Context, in *BatchSendNotificationsRequest, opts ...grpc.CallOption) (*BatchSendNotificationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchSendNotificationsResponse)
	err := c.cc.Invoke(ctx, NotificationService_BatchSendNotifications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) BatchSendNotificationsAsync(ctx context.Context, in *BatchSendNotificationsAsyncRequest, opts ...grpc.CallOption) (*BatchSendNotificationsAsyncResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchSendNotificationsAsyncResponse)
	err := c.cc.Invoke(ctx, NotificationService_BatchSendNotificationsAsync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) TxPrepare(ctx context.Context, in *TxPrepareRequest, opts ...grpc.CallOption) (*TxPrepareResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxPrepareResponse)
	err := c.cc.Invoke(ctx, NotificationService_TxPrepare_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) TxCommit(ctx context.Context, in *TxCommitRequest, opts ...grpc.CallOption) (*TxCommitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxCommitResponse)
	err := c.cc.Invoke(ctx, NotificationService_TxCommit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) TxCancel(ctx context.Context, in *TxCancelRequest, opts ...grpc.CallOption) (*TxCancelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxCancelResponse)
	err := c.cc.Invoke(ctx, NotificationService_TxCancel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationServiceServer is the server API for NotificationService service.
// All implementations must embed UnimplementedNotificationServiceServer
// for forward compatibility.
type NotificationServiceServer interface {
	// 同步单条发送
	SendNotification(context.Context, *SendNotificationRequest) (*SendNotificationResponse, error)
	// 异步单条发送
	SendNotificationAsync(context.Context, *SendNotificationAsyncRequest) (*SendNotificationAsyncResponse, error)
	// 同步批量发送
	BatchSendNotifications(context.Context, *BatchSendNotificationsRequest) (*BatchSendNotificationsResponse, error)
	// 异步批量发送
	BatchSendNotificationsAsync(context.Context, *BatchSendNotificationsAsyncRequest) (*BatchSendNotificationsAsyncResponse, error)
	// 准备事务
	TxPrepare(context.Context, *TxPrepareRequest) (*TxPrepareResponse, error)
	// 提交事务
	TxCommit(context.Context, *TxCommitRequest) (*TxCommitResponse, error)
	// 取消事务
	TxCancel(context.Context, *TxCancelRequest) (*TxCancelResponse, error)
	mustEmbedUnimplementedNotificationServiceServer()
}

// UnimplementedNotificationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNotificationServiceServer struct{}

func (UnimplementedNotificationServiceServer) SendNotification(context.Context, *SendNotificationRequest) (*SendNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNotification not implemented")
}
func (UnimplementedNotificationServiceServer) SendNotificationAsync(context.Context, *SendNotificationAsyncRequest) (*SendNotificationAsyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNotificationAsync not implemented")
}
func (UnimplementedNotificationServiceServer) BatchSendNotifications(context.Context, *BatchSendNotificationsRequest) (*BatchSendNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchSendNotifications not implemented")
}
func (UnimplementedNotificationServiceServer) BatchSendNotificationsAsync(context.Context, *BatchSendNotificationsAsyncRequest) (*BatchSendNotificationsAsyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchSendNotificationsAsync not implemented")
}
func (UnimplementedNotificationServiceServer) TxPrepare(context.Context, *TxPrepareRequest) (*TxPrepareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TxPrepare not implemented")
}
func (UnimplementedNotificationServiceServer) TxCommit(context.Context, *TxCommitRequest) (*TxCommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TxCommit not implemented")
}
func (UnimplementedNotificationServiceServer) TxCancel(context.Context, *TxCancelRequest) (*TxCancelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TxCancel not implemented")
}
func (UnimplementedNotificationServiceServer) mustEmbedUnimplementedNotificationServiceServer() {}
func (UnimplementedNotificationServiceServer) testEmbeddedByValue()                             {}

// UnsafeNotificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationServiceServer will
// result in compilation errors.
type UnsafeNotificationServiceServer interface {
	mustEmbedUnimplementedNotificationServiceServer()
}

func RegisterNotificationServiceServer(s grpc.ServiceRegistrar, srv NotificationServiceServer) {
	// If the following call pancis, it indicates UnimplementedNotificationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NotificationService_ServiceDesc, srv)
}

func _NotificationService_SendNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SendNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_SendNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SendNotification(ctx, req.(*SendNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_SendNotificationAsync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendNotificationAsyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SendNotificationAsync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_SendNotificationAsync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SendNotificationAsync(ctx, req.(*SendNotificationAsyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_BatchSendNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchSendNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).BatchSendNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_BatchSendNotifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).BatchSendNotifications(ctx, req.(*BatchSendNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_BatchSendNotificationsAsync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchSendNotificationsAsyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).BatchSendNotificationsAsync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_BatchSendNotificationsAsync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).BatchSendNotificationsAsync(ctx, req.(*BatchSendNotificationsAsyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_TxPrepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxPrepareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).TxPrepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_TxPrepare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).TxPrepare(ctx, req.(*TxPrepareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_TxCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).TxCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_TxCommit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).TxCommit(ctx, req.(*TxCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_TxCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxCancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).TxCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_TxCancel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).TxCancel(ctx, req.(*TxCancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificationService_ServiceDesc is the grpc.ServiceDesc for NotificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notification.v1.NotificationService",
	HandlerType: (*NotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendNotification",
			Handler:    _NotificationService_SendNotification_Handler,
		},
		{
			MethodName: "SendNotificationAsync",
			Handler:    _NotificationService_SendNotificationAsync_Handler,
		},
		{
			MethodName: "BatchSendNotifications",
			Handler:    _NotificationService_BatchSendNotifications_Handler,
		},
		{
			MethodName: "BatchSendNotificationsAsync",
			Handler:    _NotificationService_BatchSendNotificationsAsync_Handler,
		},
		{
			MethodName: "TxPrepare",
			Handler:    _NotificationService_TxPrepare_Handler,
		},
		{
			MethodName: "TxCommit",
			Handler:    _NotificationService_TxCommit_Handler,
		},
		{
			MethodName: "TxCancel",
			Handler:    _NotificationService_TxCancel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notification/v1/notification.proto",
}
