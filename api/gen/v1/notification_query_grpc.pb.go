// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: notification/v1/notification_query.proto

package notificationpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NotificationQueryService_QueryNotification_FullMethodName       = "/notification.v1.NotificationQueryService/QueryNotification"
	NotificationQueryService_BatchQueryNotifications_FullMethodName = "/notification.v1.NotificationQueryService/BatchQueryNotifications"
)

// NotificationQueryServiceClient is the client API for NotificationQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 查询服务
type NotificationQueryServiceClient interface {
	// 单条查询
	QueryNotification(ctx context.Context, in *QueryNotificationRequest, opts ...grpc.CallOption) (*QueryNotificationResponse, error)
	// 批量查询
	BatchQueryNotifications(ctx context.Context, in *BatchQueryNotificationsRequest, opts ...grpc.CallOption) (*BatchQueryNotificationsResponse, error)
}

type notificationQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationQueryServiceClient(cc grpc.ClientConnInterface) NotificationQueryServiceClient {
	return &notificationQueryServiceClient{cc}
}

func (c *notificationQueryServiceClient) QueryNotification(ctx context.Context, in *QueryNotificationRequest, opts ...grpc.CallOption) (*QueryNotificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryNotificationResponse)
	err := c.cc.Invoke(ctx, NotificationQueryService_QueryNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationQueryServiceClient) BatchQueryNotifications(ctx context.Context, in *BatchQueryNotificationsRequest, opts ...grpc.CallOption) (*BatchQueryNotificationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchQueryNotificationsResponse)
	err := c.cc.Invoke(ctx, NotificationQueryService_BatchQueryNotifications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationQueryServiceServer is the server API for NotificationQueryService service.
// All implementations must embed UnimplementedNotificationQueryServiceServer
// for forward compatibility.
//
// 查询服务
type NotificationQueryServiceServer interface {
	// 单条查询
	QueryNotification(context.Context, *QueryNotificationRequest) (*QueryNotificationResponse, error)
	// 批量查询
	BatchQueryNotifications(context.Context, *BatchQueryNotificationsRequest) (*BatchQueryNotificationsResponse, error)
	mustEmbedUnimplementedNotificationQueryServiceServer()
}

// UnimplementedNotificationQueryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNotificationQueryServiceServer struct{}

func (UnimplementedNotificationQueryServiceServer) QueryNotification(context.Context, *QueryNotificationRequest) (*QueryNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryNotification not implemented")
}
func (UnimplementedNotificationQueryServiceServer) BatchQueryNotifications(context.Context, *BatchQueryNotificationsRequest) (*BatchQueryNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchQueryNotifications not implemented")
}
func (UnimplementedNotificationQueryServiceServer) mustEmbedUnimplementedNotificationQueryServiceServer() {
}
func (UnimplementedNotificationQueryServiceServer) testEmbeddedByValue() {}

// UnsafeNotificationQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationQueryServiceServer will
// result in compilation errors.
type UnsafeNotificationQueryServiceServer interface {
	mustEmbedUnimplementedNotificationQueryServiceServer()
}

func RegisterNotificationQueryServiceServer(s grpc.ServiceRegistrar, srv NotificationQueryServiceServer) {
	// If the following call pancis, it indicates UnimplementedNotificationQueryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NotificationQueryService_ServiceDesc, srv)
}

func _NotificationQueryService_QueryNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationQueryServiceServer).QueryNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationQueryService_QueryNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationQueryServiceServer).QueryNotification(ctx, req.(*QueryNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationQueryService_BatchQueryNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchQueryNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationQueryServiceServer).BatchQueryNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationQueryService_BatchQueryNotifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationQueryServiceServer).BatchQueryNotifications(ctx, req.(*BatchQueryNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificationQueryService_ServiceDesc is the grpc.ServiceDesc for NotificationQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notification.v1.NotificationQueryService",
	HandlerType: (*NotificationQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryNotification",
			Handler:    _NotificationQueryService_QueryNotification_Handler,
		},
		{
			MethodName: "BatchQueryNotifications",
			Handler:    _NotificationQueryService_BatchQueryNotifications_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notification/v1/notification_query.proto",
}
